# Build stage: Use Node.js 18 on Alpine Linux for smaller image size
FROM node:18-alpine AS builder

# Set working directory for the build stage
WORKDIR /app

# Copy package.json and package-lock.json to leverage Docker cache
COPY package*.json ./

# Install dependencies using npm ci for deterministic builds and clean cache
RUN npm ci && npm cache clean --force

# Copy all source code into the container
COPY . .

# Build the React application for production
RUN npm run build

# Production stage: Use Nginx on Alpine Linux for serving static files
FROM nginx:alpine

# Upgrade all packages to get latest security patches
RUN apk upgrade --no-cache

# Copy custom Nginx configuration to replace default config
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy built React app from builder stage to Nginx html directory
COPY --from=builder /app/build /usr/share/nginx/html

# Expose port 80 for HTTP traffic
EXPOSE 80

# Start Nginx in foreground mode (required for Docker containers)
CMD ["nginx", "-g", "daemon off;"]
